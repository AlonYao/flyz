package com.appublisher.quizbank.common.interview.fragment;import android.app.Activity;import android.app.AlertDialog;import android.app.Service;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.graphics.Bitmap;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.Typeface;import android.graphics.drawable.AnimationDrawable;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.content.ContextCompat;import android.telephony.TelephonyManager;import android.text.SpannableString;import android.text.Spanned;import android.text.style.AbsoluteSizeSpan;import android.text.style.ForegroundColorSpan;import android.text.style.StyleSpan;import android.util.DisplayMetrics;import android.util.TypedValue;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.TranslateAnimation;import android.widget.AbsListView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.android.volley.VolleyError;import com.android.volley.toolbox.ImageLoader;import com.appublisher.lib_basic.FileManager;import com.appublisher.lib_basic.Logger;import com.appublisher.lib_basic.MediaRecorderManager;import com.appublisher.lib_basic.ToastManager;import com.appublisher.lib_basic.UmengManager;import com.appublisher.lib_basic.Utils;import com.appublisher.lib_basic.activity.ScaleImageActivity;import com.appublisher.lib_basic.customui.RoundProgressBarWidthNumber;import com.appublisher.lib_basic.volley.Request;import com.appublisher.lib_login.model.business.LoginModel;import com.appublisher.quizbank.R;import com.appublisher.quizbank.common.interview.activity.InterviewCommentGuideActivity;import com.appublisher.quizbank.common.interview.activity.InterviewCommentProductActivity;import com.appublisher.quizbank.common.interview.activity.InterviewMaterialDetailActivity;import com.appublisher.quizbank.common.interview.activity.InterviewPaperDetailActivity;import com.appublisher.quizbank.common.interview.model.InterviewDetailModel;import com.appublisher.quizbank.common.interview.model.InterviewModel;import com.appublisher.quizbank.common.interview.netdata.InterviewControlsStateBean;import com.appublisher.quizbank.common.interview.netdata.InterviewPaperDetailResp;import com.appublisher.quizbank.common.interview.network.ICommonCallback;import com.appublisher.quizbank.common.interview.service.MediaPlayingService;import com.appublisher.quizbank.common.interview.view.IIterviewDetailBaseFragmentView;import com.appublisher.quizbank.common.interview.view.InterviewConstants;import com.appublisher.quizbank.common.interview.view.InterviewDetailBaseFragmentCallBak;import com.appublisher.quizbank.model.business.CommonModel;import com.appublisher.quizbank.model.richtext.IParser;import com.appublisher.quizbank.model.richtext.ImageParser;import com.appublisher.quizbank.model.richtext.MatchInfo;import com.appublisher.quizbank.model.richtext.ParseManager;import org.apmem.tools.layouts.FlowLayout;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.Map;/** * Created by huaxiao on 2016/12/16. * 面试页面部分 */public abstract class InterviewDetailBaseFragment extends Fragment implements IIterviewDetailBaseFragmentView, InterviewDetailBaseFragmentCallBak {    public View mUnRecordView;    public View mRecordingView;    public View mUnSubmitView;    public View mHadSubmitView;    public View mFragmentView;    public InterviewPaperDetailActivity mActivity;    public InterviewPaperDetailResp.QuestionsBean mQuestionBean;    public InterviewDetailModel mModel;    public LinearLayout mUnRecordSoundLl;    public LinearLayout mRecordSoundingLl;    public LinearLayout mRecordNotSubmitLl;    public LinearLayout mRecordNotSubmitConfirmLl;    public LinearLayout mQuestionContentLl;    public LinearLayout mAnalysisViewLl;    private LinearLayout mNotRemarkLl;    private LinearLayout mExistRemarkLl;    public RelativeLayout mRecordSoundingCancelRl;    public RelativeLayout mRecordSoundingConfirmRl;    public RelativeLayout mRecordNotSubmitPlayRl;    public RelativeLayout mAnswerListenRl;    public RelativeLayout mMaterialViewRl;    public RelativeLayout mAnalysisSwitchViewRl;    public RelativeLayout mQuestionSwitchViewRl;    private RelativeLayout mTeacherRemarkRl;    public TextView mTimeRecordingTv;    public TextView mNotSubmitStateTv;    public TextView mTimeNotSubmitPlayTv;    public TextView mTimeHadSubmitPlayTv;    private TextView mAnalysisTv;    private TextView mNoteTv;    private TextView mSourceTv;    private TextView mKeywordsTv;    public TextView mReminderTv;    private TextView mRemarkNumberTv;    private TextView mPurchasedLinkTv;    public TextView mTeacherRemarkPlayTimeTv;    public TextView mTeacherRemarkPlayStateTv;    public TextView mUserAnswerPlayStateTv;    private TextView mWaitRemarkingTv;    public TextView mQuestionAudioTv;    public TextView mAnalysisAudioTv;    public ImageView mRecordSoundIv;    public ImageView mAnalysisIv;    private ImageView mQuestionHelpIv;    public ImageView mQuestionAudioIv;    public ImageView mAnalysisAudioIv;    private ImageView mTeacherRemarkOpenIv;    private ImageView mTeacherRemarkCloseIv;    public String mStatus;    private String mRecordFolder;    public String mUserAnswerFilePath;    private String mQuestionType;    private String mTemporaryFilePath;    private String mTeacherRemarkRecordFolder;    private String mTeacherRemarkRemainderNum;    public String mQuestionFileFolder;    public String mAnalysisFileFolder;    public String mPlayingMedia;    public String mIsUnPurchasedOrPurchasedView;    private String mTeacherRemarkAudioTimeStamp;    public int mRemarkState;    public int mUserNotSubmitAudioOffset;    public int mUserHadSubmitAudioOffset;    public int mQuestionAudioOffset;    public int mAnalysisAudioOffset;    public int mTeacherRemarkAudioOffset;    private boolean mIsCanSubmit;    public boolean mIsCanTouch;    public boolean mIsHadValidRecordFile;    private boolean mIsRecording;    public RoundProgressBarWidthNumber mUserHadSubmitAudioProgressBar;    public RoundProgressBarWidthNumber mUserNotSubmitAudioProgressBar;    public RoundProgressBarWidthNumber mTeacherRemarkProgressBar;    public RoundProgressBarWidthNumber mQuestionAudioProgressBar;    public RoundProgressBarWidthNumber mAnalysisAudioProgressBar;    private PhoneBroadcastReceiver mPhoneBroadcastReceiver;    private AudioStreamFocusReceiver mAudioStreamFocusReceiver;    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mActivity = (InterviewPaperDetailActivity) getActivity();        mModel = new InterviewDetailModel(mActivity, this);        mStatus = InterviewConstants.NOT_EXIST_PLAYING_MEDIA;                // 动态注册广播        IntentFilter phoneCallingFilter = new IntentFilter();        phoneCallingFilter.addAction("android.intent.action.NEW_OUTGOING_CALL");        phoneCallingFilter.addAction("android.intent.action.PHONE_STATE");        mPhoneBroadcastReceiver = new PhoneBroadcastReceiver();        mActivity.registerReceiver(mPhoneBroadcastReceiver, phoneCallingFilter);        //动态注册广播接收器        IntentFilter audioFocusFilter = new IntentFilter();        audioFocusFilter.addAction("com.appublisher.quizbank.common.interview.fragment.AUDIOSTREAMFOCUSRECEIVER");        mAudioStreamFocusReceiver = new AudioStreamFocusReceiver();        mActivity.registerReceiver(mAudioStreamFocusReceiver, audioFocusFilter);    }    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        mIsHadValidRecordFile = false;        mIsCanTouch = true;        mIsRecording = false;        mPlayingMedia = InterviewConstants.NOT_EXIST_PLAYING_MEDIA;               // 正在播放的view        mActivity.setCanBack(0);            // 默认设置返回键可以点击        mFragmentView = inflater.inflate(setLayoutResourceId(), container, false); // 生成布局        mQuestionBean = initChildData();        mQuestionType = initChildQuestionType();        mTeacherRemarkAudioTimeStamp = mModel.changeTimeStampToText(mQuestionBean.getReviewed_at());     // 转换名师点评老师提交录音的时间戳        mRemarkState = mQuestionBean.getComment_status();        mUserNotSubmitAudioOffset = 0;        mUserHadSubmitAudioOffset = 0;        mQuestionAudioOffset = 0;        mAnalysisAudioOffset = 0;        mTeacherRemarkAudioOffset = 0;        mIsUnPurchasedOrPurchasedView = getIsUnPurchasedOrPurchasedView();       // 获取是哪一个页面        initRecordView();             // 初始化录音页面控件        initChildView();        initRecordView();             // 初始化录音页面控件        checkIsAnswer();        setIsCanTouch();        initRecordFile();             // 初始化录音文件        initChildListener();        initRecordListener();        showQuestion();        showAnswer();        isDone();        return mFragmentView;    }    @Override    public void onResume() {        super.onResume();        // 刷新        updateFragmentViewState();    }    private void checkIsAnswer() {        if (mQuestionBean.getUser_audio() != null && mQuestionBean.getUser_audio().length() > 0) {            getTeacherRemarkRemainder();          // 获取名师点评剩余的次数            changeRecordView(InterviewConstants.SHOW_HAD_SUBMIT_VIEW);            checkTeacherRemarkState();      // 检查点评的状态            if (mQuestionBean.getUser_audio_duration() >= InterviewConstants.UPPER_LIMIT_RECORD_TIME) {                mTimeHadSubmitPlayTv.setText(mModel.formatDateTime(InterviewConstants.UPPER_LIMIT_RECORD_TIME));            } else {                mTimeHadSubmitPlayTv.setText(mModel.formatDateTime(mQuestionBean.getUser_audio_duration()));            }            mStatus = InterviewConstants.HAD_SUBMIT;        } else {            mUnRecordView.setVisibility(View.VISIBLE);            mAnalysisViewLl.setVisibility(View.GONE);       //如果未答题:解析行折叠        }    }    // 获取名师点评剩余的次数    public void getTeacherRemarkRemainder() {        mModel.mRequest.getTeacherRemarkRemainder(2);           // 通过model来获取    }    // 回调接口,获取名师点评的剩余的次数    @Override    public void refreshTeacherRemarkRemainder(String num) {        mTeacherRemarkRemainderNum = num;        // 修改点评次数        changeTeacherRemarkNum();    }    /*    *   检查已经答题后:名师点评的状态    * */    private void checkTeacherRemarkState() {        if (!mQuestionBean.isPurchased_review()) {      // 没有申请名师点评            mRemarkState = InterviewConstants.NOT_APPLY_REMARK;            mNotRemarkLl.setVisibility(View.VISIBLE);            mWaitRemarkingTv.setVisibility(View.GONE);            mExistRemarkLl.setVisibility(View.GONE);        } else {                      // 申请了名师点评,需要判断:点评中 or 已点评            if (mQuestionBean == null                    || mQuestionBean.getComment_status() < 0)  return;            if (mQuestionBean.getComment_status() == InterviewConstants.COMMENT ) {                // 点评中                mNotRemarkLl.setVisibility(View.GONE);                mWaitRemarkingTv.setVisibility(View.VISIBLE);                mExistRemarkLl.setVisibility(View.GONE);            } else {                // 已经点评                if (mQuestionBean.getTeacher_name() == null                        || mQuestionBean.getTeacher_audio() == null                        || mQuestionBean.getTeacher_audio_duration() <= 0)  return;                mRemarkState = InterviewConstants.HAD_REMARKED;                mNotRemarkLl.setVisibility(View.GONE);                mWaitRemarkingTv.setVisibility(View.GONE);                mExistRemarkLl.setVisibility(View.VISIBLE);                mTeacherRemarkPlayTimeTv.setText(mModel.formatDateTime(mQuestionBean.getTeacher_audio_duration()));            }        }    }    /*    *   检查是否第一次提交题    * */    @Override    public void checkIsFirstSubmit() {        SharedPreferences sp = InterviewModel.getInterviewSharedPreferences(mActivity);        boolean isFirstSubmit = sp.getBoolean("isFirstSubmitAudio", true);        if (isFirstSubmit) {            // 弹出引导浮层            popupGuideFloating();            SharedPreferences shp = InterviewModel.getInterviewSharedPreferences(mActivity);            SharedPreferences.Editor edit = shp.edit();            edit.putBoolean("isFirstSubmitAudio", false);            edit.apply();        }    }    private void initRecordView() {        mMaterialViewRl = (RelativeLayout) mFragmentView.findViewById(R.id.meterial_rl);        mQuestionSwitchViewRl = (RelativeLayout) mFragmentView.findViewById(R.id.analysis_quesition_rl);        mQuestionContentLl = (LinearLayout) mFragmentView.findViewById(R.id.question_content);        mAnalysisSwitchViewRl = (RelativeLayout) mFragmentView.findViewById(R.id.analysis_switch_rl);        mAnalysisViewLl = (LinearLayout) mFragmentView.findViewById(R.id.analysis_ll);        mAnalysisIv = (ImageView) mFragmentView.findViewById(R.id.analysis_im);        mReminderTv = (TextView) mFragmentView.findViewById(R.id.open_analysis);        mAnalysisTv = (TextView) mFragmentView.findViewById(R.id.analysis_tv);        mNoteTv = (TextView) mFragmentView.findViewById(R.id.note_tv);        mSourceTv = (TextView) mFragmentView.findViewById(R.id.source_tv);        mKeywordsTv = (TextView) mFragmentView.findViewById(R.id.keywords_tv);        // 抽取录音部分的控件        mUnRecordView = mFragmentView.findViewById(R.id.interview_popup_unrecordsound);        mRecordingView = mFragmentView.findViewById(R.id.interview_popup_recordsounding);        mUnSubmitView = mFragmentView.findViewById(R.id.interview_popup_recordsounding_unsubmit);        mHadSubmitView = mFragmentView.findViewById(R.id.interview_popup_recordsounded);        // 初始化各自的控件        mUnRecordSoundLl = (LinearLayout) mFragmentView.findViewById(R.id.interview_unrecordsound_ll);        mTeacherRemarkOpenIv = (ImageView) mFragmentView.findViewById(R.id.teacher_remark_open_iv);        mTeacherRemarkCloseIv = (ImageView) mFragmentView.findViewById(R.id.teacher_remark_close_iv);        mRecordSoundingCancelRl = (RelativeLayout) mFragmentView.findViewById(R.id.interview_recordsounding_cancle);        mRecordSoundingConfirmRl = (RelativeLayout) mFragmentView.findViewById(R.id.interview_recordsounding_rl_confirm);        mRecordSoundingLl = (LinearLayout) mFragmentView.findViewById(R.id.interview_recordsounding_ll);        mTimeRecordingTv = (TextView) mFragmentView.findViewById(R.id.tv_record_sounding_time);        mRecordSoundIv = (ImageView) mFragmentView.findViewById(R.id.imagview_confirm);        mRecordNotSubmitLl = (LinearLayout) mFragmentView.findViewById(R.id.interview_recordsound_rl_rerecording);        mRecordNotSubmitPlayRl = (RelativeLayout) mFragmentView.findViewById(R.id.interview_recordsounding_ll_play);        mUserNotSubmitAudioProgressBar = (RoundProgressBarWidthNumber) mFragmentView.findViewById(R.id.user_answer_progressbar_notsubmit);        mUserNotSubmitAudioProgressBar.setIsExistInsideText(false);        mRecordNotSubmitConfirmLl = (LinearLayout) mFragmentView.findViewById(R.id.interview_recordsounding_rl_submit);        mNotSubmitStateTv = (TextView) mFragmentView.findViewById(R.id.tv_record_play);        mTimeNotSubmitPlayTv = (TextView) mFragmentView.findViewById(R.id.tv_record_sounding_play_time);        mAnswerListenRl = (RelativeLayout) mFragmentView.findViewById(R.id.interview_hadanswer_listen_rl);        mTimeHadSubmitPlayTv = (TextView) mFragmentView.findViewById(R.id.tv_recorded_sound_play_time);        mTeacherRemarkRl = (RelativeLayout) mFragmentView.findViewById(R.id.teacher_remark_rl);         // 点评进度条整体        // 用户答案进度条        mUserHadSubmitAudioProgressBar = (RoundProgressBarWidthNumber) mFragmentView.findViewById(R.id.user_answer_progressbar_left);        mUserHadSubmitAudioProgressBar.setIsExistInsideText(false);        mTeacherRemarkProgressBar = (RoundProgressBarWidthNumber) mFragmentView.findViewById(R.id.teacher_remark_progressbar_right);    // 老师点评进度条        mTeacherRemarkProgressBar.setIsExistInsideText(false);        mRemarkNumberTv = (TextView) mFragmentView.findViewById(R.id.teacher_remark_number);            // 点评次数        mQuestionHelpIv = (ImageView) mFragmentView.findViewById(R.id.question_help_iv);            // 问号图标        mPurchasedLinkTv = (TextView) mFragmentView.findViewById(R.id.purchased_remark_tv);         // 购买链接        mWaitRemarkingTv = (TextView) mFragmentView.findViewById(R.id.teacher_remark_waiting_tv);       // 点评中        mUserAnswerPlayStateTv = (TextView) mFragmentView.findViewById(R.id.user_answer_state_tv);           // 用户答案播放的状态        mTeacherRemarkPlayTimeTv = (TextView) mFragmentView.findViewById(R.id.teacher_remark_time);   // 具有老师点评时的时间        mTeacherRemarkPlayStateTv = (TextView) mFragmentView.findViewById(R.id.teacher_remark_state_tv);  // 具有老师点评时播放的状态        mNotRemarkLl = (LinearLayout) mFragmentView.findViewById(R.id.teacher_notremark_ll);      // 没有申请点评        mExistRemarkLl = (LinearLayout) mFragmentView.findViewById(R.id.teacher_remark_offered_ll);     // 存在老师点评整体        mQuestionAudioProgressBar = (RoundProgressBarWidthNumber) mFragmentView.findViewById(R.id.question_audio_progressbar);        mAnalysisAudioProgressBar = (RoundProgressBarWidthNumber) mFragmentView.findViewById(R.id.analysis_audio_progressbar);        mQuestionAudioIv = (ImageView) mFragmentView.findViewById(R.id.question_audio_listen_audio_iv);        mAnalysisAudioIv = (ImageView) mFragmentView.findViewById(R.id.analysis_audio_listen_audio_iv);        mQuestionAudioTv = (TextView) mFragmentView.findViewById(R.id.listenquestion_tv);        mAnalysisAudioTv = (TextView) mFragmentView.findViewById(R.id.listenanswer_tv);        if (mIsUnPurchasedOrPurchasedView.equals("PurchasedView")) {            mQuestionAudioProgressBar.setIsExistInsideText(false);            mAnalysisAudioProgressBar.setIsExistInsideText(false);        }        if (mQuestionBean != null) {            //材料            if (mQuestionBean.getMaterial() != null && !"".equals(mQuestionBean.getMaterial())) {                mMaterialViewRl.setVisibility(View.VISIBLE);                mMaterialViewRl.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (!mIsCanTouch) {                            ToastManager.showToast(mActivity, "请专心录音哦");                            return;                        }                        final Intent intent = new Intent(mActivity, InterviewMaterialDetailActivity.class);                        intent.putExtra("material", mQuestionBean.getMaterial());                        mActivity.startActivity(intent);                        // Umeng                        HashMap<String, String> map = new HashMap<>();                        map.put("Action", "Material");                        UmengManager.onEvent(mActivity, "InterviewQuestion", map);                    }                });            } else {                mMaterialViewRl.setVisibility(View.GONE);            }            mAnalysisViewLl.setVisibility(View.GONE);  // 解析答案的容器默认不显示        }    }    /*    *   初始化录音文件    * */    private void initRecordFile() {        String userId = LoginModel.getUserId();        mRecordFolder = FileManager.getRootFilePath(mActivity) + "/interview/" + userId + "/user_answer/";            // 自己录音的路径        mTeacherRemarkRecordFolder = FileManager.getRootFilePath(mActivity) + "/interview/" + userId + "/teacher_audio/" + mQuestionBean.getId();     // 名师点评录音的路径        FileManager.mkDir(mRecordFolder);        FileManager.mkDir(mTeacherRemarkRecordFolder);        mQuestionFileFolder = FileManager.getRootFilePath(mActivity) + "/interview/" + LoginModel.getUserId() + "/question_audio/";        mAnalysisFileFolder = FileManager.getRootFilePath(mActivity) + "/interview/" + LoginModel.getUserId() + "/analysis_audio/";        FileManager.mkDir(mQuestionFileFolder);        FileManager.mkDir(mAnalysisFileFolder);        mUserAnswerFilePath = mRecordFolder + mQuestionBean.getId() + ".amr";        // 录音存储的文件路径        mTemporaryFilePath = mRecordFolder + mQuestionBean.getId() + "temp.amr";        // 临时文件的存储路径    }    public void initRecordListener() {   // 录音控件的监听事件        // 监听录音控件        mUnRecordSoundLl.setOnClickListener(OnClickListener);        mRecordSoundingCancelRl.setOnClickListener(OnClickListener);        mRecordSoundingConfirmRl.setOnClickListener(OnClickListener);        mRecordSoundingLl.setOnClickListener(OnClickListener);        mRecordNotSubmitLl.setOnClickListener(OnClickListener);        mRecordNotSubmitPlayRl.setOnClickListener(OnClickListener);        mRecordNotSubmitConfirmLl.setOnClickListener(OnClickListener);        mAnswerListenRl.setOnClickListener(OnClickListener);        mTeacherRemarkCloseIv.setOnClickListener(OnClickListener);        mTeacherRemarkOpenIv.setOnClickListener(OnClickListener);        // 名师点评部分        mTeacherRemarkRl.setOnClickListener(OnClickListener);   // 名师点评        mQuestionHelpIv.setOnClickListener(OnClickListener);    // 问号        mPurchasedLinkTv.setOnClickListener(OnClickListener);   // 购买链接    }    public void showReminderToast() {        ToastManager.showToast(mActivity, "还有30秒");    }    /*    *   展示题目的文字    * */    public void showQuestion() {        //下面的是展示问题的文字的处理        String rich = getChildFragmentRich();        addRichTextToContainer(mActivity, mQuestionContentLl, rich, true);    }    /*    *   展示解析行的文字    * */    public void showAnswer() {        // 解析行的文字处理        ForegroundColorSpan colorSpan = new ForegroundColorSpan(ContextCompat.getColor(mActivity, R.color.themecolor));        AbsoluteSizeSpan sizeSpan = new AbsoluteSizeSpan(Utils.sp2px(mActivity, 15));        StyleSpan styleSpan = new StyleSpan(Typeface.BOLD);        //解析        SpannableString analysis = new SpannableString("【解析】" + mQuestionBean.getAnalysis());        analysis.setSpan(colorSpan, 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        analysis.setSpan(sizeSpan, 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        analysis.setSpan(styleSpan, 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        mAnalysisTv.setLineSpacing(0, 1.4f);        mAnalysisTv.setText(analysis);        //知识点        SpannableString note = new SpannableString("【知识点】" + mQuestionBean.getNotes());        note.setSpan(colorSpan, 0, 5, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        note.setSpan(sizeSpan, 0, 5, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        note.setSpan(styleSpan, 0, 5, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        mNoteTv.setLineSpacing(0, 1.4f);        mNoteTv.setText(note);        //来源        SpannableString source = new SpannableString("【来源】" + mQuestionBean.getFrom());        source.setSpan(colorSpan, 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        source.setSpan(sizeSpan, 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        source.setSpan(styleSpan, 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        mSourceTv.setLineSpacing(0, 1.4f);        mSourceTv.setText(source);        //关键词        SpannableString keywords = new SpannableString("【关键词】" + mQuestionBean.getKeywords());        keywords.setSpan(colorSpan, 0, 5, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        keywords.setSpan(sizeSpan, 0, 5, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        keywords.setSpan(styleSpan, 0, 5, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        mKeywordsTv.setLineSpacing(0, 1.4f);        mKeywordsTv.setText(keywords);    }    /**     * 动态添加富文本     *     * @param activity  Activity     * @param container 富文本控件容器     * @param rich      富文本     */    public void addRichTextToContainer(final Activity activity,                                       LinearLayout container,                                       String rich,                                       boolean textClick) {        if (rich == null || rich.length() <= 0) return;        Request request = new Request(activity);        // 通过迭代装饰方式构造解析器        IParser parser = new ImageParser(activity);        // 执行解析并返回解析文本段队列        ParseManager manager = new ParseManager();        ArrayList<ParseManager.ParsedSegment> segments = manager.parse(parser, rich);        // 用 Holder 模式更新列表数据        FlowLayout flowLayout = new FlowLayout(activity);        AbsListView.LayoutParams params = new AbsListView.LayoutParams(                AbsListView.LayoutParams.MATCH_PARENT,                AbsListView.LayoutParams.WRAP_CONTENT);        flowLayout.setLayoutParams(params);        flowLayout.setGravity(Gravity.CENTER_VERTICAL);        for (final ParseManager.ParsedSegment segment : segments) {            if (segment.text == null || segment.text.length() == 0) {                continue;            }            if (MatchInfo.MatchType.None == segment.type) {                TextView textView = new TextView(activity);                LinearLayout.LayoutParams p = new LinearLayout.LayoutParams(                        LinearLayout.LayoutParams.WRAP_CONTENT,                        LinearLayout.LayoutParams.WRAP_CONTENT);                textView.setLayoutParams(p);                textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 17);                textView.setTextColor(ContextCompat.getColor(mActivity, R.color.common_text));                textView.setLineSpacing(0, 1.4f);                textView.setText(segment.text);                flowLayout.addView(textView);                // text长按复制                if (textClick) {                    CommonModel.setTextLongClickCopy(textView);                }            } else if (MatchInfo.MatchType.Image == segment.type) {                final ImageView imgView = new ImageView(activity);                LinearLayout.LayoutParams p = new LinearLayout.LayoutParams(                        LinearLayout.LayoutParams.WRAP_CONTENT,                        LinearLayout.LayoutParams.WRAP_CONTENT);                imgView.setLayoutParams(p);                imgView.setImageResource(R.drawable.measure_loading_img);                flowLayout.addView(imgView);                // 异步加载图片                DisplayMetrics dm = activity.getResources().getDisplayMetrics();                final float minHeight = (float) ((dm.heightPixels - 50) * 0.05); // 50是状态栏高度                ImageLoader.ImageListener imageListener = new ImageLoader.ImageListener() {                    @Override                    public void onResponse(ImageLoader.ImageContainer imageContainer, boolean b) {                        Bitmap data = imageContainer.getBitmap();                        if (data == null) return;                        // 对小于指定尺寸的图片进行放大(2倍)                        int width = data.getWidth();                        int height = data.getHeight();                        if (height < minHeight) {                            Matrix matrix = new Matrix();                            matrix.postScale(2.0f, 2.0f);                            data = Bitmap.createBitmap(data, 0, 0, width, height, matrix, true);                        }                        imgView.setImageBitmap(data);                    }                    @Override                    public void onErrorResponse(VolleyError volleyError) {                    }                };                request.loadImage(segment.text.toString(), imageListener);                imgView.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        Intent intent = new Intent();                        intent.setClass(activity, ScaleImageActivity.class);                        intent.putExtra("imgUrl", segment.text.toString());                        activity.startActivity(intent);                    }                });            }        }        container.addView(flowLayout);    }    /**     * 底部录音页面中各个控件的点击事件     */    public View.OnClickListener OnClickListener = new View.OnClickListener() {        @Override        public void onClick(View view) {            int id = view.getId();            if (id == R.id.interview_unrecordsound_ll) {    //如果点击了录音功能                changeControlsBeanState();                      // 先修改map中的状态:同一个页面设置为暂停,不同的页面设置为默认状态                updateControlsView();                           // 刷新控件的view                stopPlay();                                     // 停止播放语音                mIsRecording = true;                          // 用来判断是否获取音频焦点                mIsCanTouch = false;                setIsCanTouch();                                // 不可以触摸其它控件                mActivity.setCanBack(1);                       // 不可以按返回键                changeRecordView(InterviewConstants.SHOW_RECORDING_VIEW);                prepareRecord();                // Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Record");                UmengManager.onEvent(mActivity, "InterviewRecord", map);            } else if (id == R.id.interview_recordsounding_cancle) {         // 点击取消功能: 判断有效文件是否存在                checkRecordingState();                // Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Cancel");                UmengManager.onEvent(mActivity, "InterviewRecord", map);            } else if (id == R.id.interview_recordsounding_rl_confirm) {     //点击确认功能                if (mIsCanSubmit) {                         // 时间超过最低限制可提交                    stopRecord();                    mIsCanTouch = true;                    setIsCanTouch();                    mActivity.setCanBack(2);                // 返回键设置不可返回,点击有弹窗                    mUserNotSubmitAudioProgressBar.setProgress(100);                    mIsHadValidRecordFile = true;           // 点击确认后,本地拥有有效录音文件                    // 此时录音文件已经存在,判断确认文件是否存在,时长是否为零                    changeFileName();                    changeRecordView(InterviewConstants.SHOW_NOT_SUBMIT_VIEW);                    showRecordedDuration();             // 显示录音的时长                    if (mActivity.mHoldFragmentControlsMap == null || mActivity.mHoldFragmentControlsMap.size() <= 0) return;                    String controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 0);                    InterviewControlsStateBean interviewControlsStateBean = mActivity.mHoldFragmentControlsMap.get(controlsIdentification);                    if (interviewControlsStateBean != null) mActivity.mHoldFragmentControlsMap.remove(controlsIdentification);                } else {                    ToastManager.showToast(mActivity, "答题至少要一分钟哦");                }                // Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Conform");                UmengManager.onEvent(mActivity, "InterviewRecord", map);            } else if (id == R.id.interview_recordsounding_ll) {             // 点击录音整体                if (mIsCanTouch)                    ToastManager.showToast(getActivity(), "正在录音,答题至少要一分钟哦");            } else if (id == R.id.interview_recordsound_rl_rerecording) {      //点击重录                if (mActivity.mMediaRecorderManager != null) {                    // 先将播放的控件的bean修改                    changeControlsBeanState();                    // 刷新view                    updateControlsView();                    stopPlay();                    // 重录的逻辑                    String zero = "0\"";                    mTimeRecordingTv.setText(zero);                    mNotSubmitStateTv.setText("听语音");                    mRecordSoundIv.setImageResource(R.drawable.interview_confirm_gray);                    mIsCanTouch = false;                    setIsCanTouch();                    mActivity.setCanBack(1);                    mIsCanSubmit = false;                    changeRecordView(InterviewConstants.SHOW_RECORDING_VIEW);                    prepareRecord();                }                // Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Remake");                UmengManager.onEvent(mActivity, "InterviewRecord", map);            } else if (id == R.id.interview_recordsounding_ll_play) {       //点击未提交播放按钮                mStatus = InterviewConstants.SUBMIT;                String controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 0);                // 播放 & 暂停语音                setControlsToPlayOrPause(controlsIdentification);                // Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Playaudio");                UmengManager.onEvent(mActivity, "InterviewRecord", map);            } else if (id == R.id.interview_recordsounding_rl_submit) {      // 点击提交按钮                // 提交时: 修改bean                changeControlsBeanState();                // 刷新view:                updateControlsView();                if (mUserAnswerFilePath == null || mUserAnswerFilePath.length() <=0                        || mQuestionBean == null || mQuestionType == null || mQuestionType.length() <= 0) {                    ToastManager.showToast(mActivity, " 提交失败,请稍后再试");                    return;                }                mModel.popupSubmitAnswerProgressBar(mUserAnswerFilePath, mQuestionBean, FileManager.getVideoDuration(mUserAnswerFilePath), mQuestionType);                // Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Submit");                UmengManager.onEvent(mActivity, "InterviewRecord", map);            } else if (id == R.id.interview_hadanswer_listen_rl) {           // 已提交播放按钮                mStatus = InterviewConstants.HAD_SUBMIT;                // 控件在集合中的标识key                String controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 1);                // 播放 & 暂停语音                setControlsToPlayOrPause(controlsIdentification);                // Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Answer");                UmengManager.onEvent(mActivity, "InterviewRecord", map);            } else if (id == R.id.teacher_remark_rl) {        // 名师点评部分                //需要判断哪一个状态                switch (mRemarkState) {                    case InterviewConstants.NOT_APPLY_REMARK:                        // 判断申请的次数                        if (mTeacherRemarkRemainderNum == null || mTeacherRemarkRemainderNum.length() <= 0) return;                        if (Integer.parseInt(mTeacherRemarkRemainderNum) > 0) {                            popupApplyForRemarkAlert();         // 申请弹窗                        } else {                            popupReminderPurchasedAlert();       // 购买alert                        }                        break;                    case InterviewConstants.COMMENT:                        ToastManager.showToastCenter(mActivity, "老师正在点评中，请耐心等待哦！");                        break;                    case InterviewConstants.HAD_REMARKED:                        mStatus = InterviewConstants.TEACHER_REMARK;                        // 判断已听还是未听,再点击事件中处理                        if (mQuestionBean.getComment_status() == InterviewConstants.UN_LISTEN ) {                            mModel.mRequest.updateCommentStatusToListen(mQuestionBean.getId(), "hear"); // 发送:已听                        }                        String controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 4);                        // 播放 & 暂停语音                        setControlsToPlayOrPause(controlsIdentification);                        // Umeng                        HashMap<String, String> map = new HashMap<>();                        map.put("Action", "Comment");                        UmengManager.onEvent(mActivity, "InterviewAnalysis", map);                        break;                }            } else if (id == R.id.question_help_iv) {         // 问号                // 跳转到帮助页面                skipToRemarkHelpActivity();                //Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Intro");                UmengManager.onEvent(mActivity, "InterviewAnalysis", map);            } else if (id == R.id.purchased_remark_tv) {      // 购买链接                // 直接跳转到购买页面                Intent intent = new Intent(getActivity(), InterviewCommentProductActivity.class);                startActivityForResult(intent, InterviewConstants.PAY_SUCCESS);                //Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Purchase");                UmengManager.onEvent(mActivity, "InterviewAnalysis", map);            } else if (id == R.id.teacher_remark_open_iv) {                // 动画:从左向右                Animation translateAnimation = new TranslateAnimation(0, 360, 0, 0);                translateAnimation.setDuration(500);                mTeacherRemarkOpenIv.startAnimation(translateAnimation);                translateAnimation.setAnimationListener(new Animation.AnimationListener() {                    @Override                    public void onAnimationStart(Animation animation) {                    }                    @Override                    public void onAnimationEnd(Animation animation) {                        mTeacherRemarkOpenIv.setVisibility(View.GONE);                        mTeacherRemarkCloseIv.setVisibility(View.VISIBLE);                    }                    @Override                    public void onAnimationRepeat(Animation animation) {                    }                });            } else if (id == R.id.teacher_remark_close_iv) {                // 动画:从右向左展开                mTeacherRemarkCloseIv.setVisibility(View.GONE);                Animation translateAnimation = new TranslateAnimation(360, 0, 0, 0);                translateAnimation.setDuration(500);                mTeacherRemarkOpenIv.startAnimation(translateAnimation);                translateAnimation.setFillAfter(true);                translateAnimation.setAnimationListener(new Animation.AnimationListener() {                    @Override                    public void onAnimationStart(Animation animation) {                        mTeacherRemarkOpenIv.setVisibility(View.VISIBLE);                    }                    @Override                    public void onAnimationEnd(Animation animation) {                        mTeacherRemarkOpenIv.setVisibility(View.VISIBLE);                    }                    @Override                    public void onAnimationRepeat(Animation animation) {                    }                });            }        }    };    /*    *   购买名师点评后的回调    * */    @Override    public void onActivityResult(int requestCode, int resultCode, Intent intent) {        super.onActivityResult(requestCode, resultCode, intent);        if (requestCode == InterviewConstants.PAY_SUCCESS && resultCode == InterviewConstants.PAY_SUCCESS) {            mActivity.getData();    // 重新刷新页面        }    }    /*    *  取消录音时    * */    private void checkRecordingState(){        // 判断是否正在录音        stopRecord();        mIsCanTouch = true;        setIsCanTouch();        // 检查可提交文件是否存在,如果存在,回到未提交页面,否则回到未录音页面        if (checkIsRecordFileExist() && mIsHadValidRecordFile) {       // 录音文件存在            changeToUnSubmitViewState();                                  // 进入可提交页面        } else {            mActivity.setCanBack(0);                                    // 不可以按返回键            String zero = "0\"";            mTimeRecordingTv.setText(zero);            mIsCanSubmit = false;            changeRecordView(InterviewConstants.SHOW_NOT_RECORD_VIEW);        }    }    /*    *   未提交时的状态    * */    private void changeToUnSubmitViewState(){        mActivity.setCanBack(2);        String controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 0);        if (mActivity.mHoldFragmentControlsMap == null || mActivity.mHoldFragmentControlsMap.size() <= 0                || mActivity.mHoldFragmentControlsMap.get(controlsIdentification) == null) {                // 没有点击过播放器时            // 修改录音文字            String duration = FileManager.getVideoDuration(mUserAnswerFilePath);            if (("").equals(duration) || duration == null) return;            if (Integer.parseInt(duration) >=360){                mTimeNotSubmitPlayTv.setText(mModel.formatDateTime(360));            } else {                mTimeNotSubmitPlayTv.setText(mModel.formatDateTime(Integer.parseInt(duration)));            }        } else {                                                                                                // 集合中存在播放器时            InterviewControlsStateBean interviewControlsStateBean = mActivity.mHoldFragmentControlsMap.get(controlsIdentification);            interviewControlsStateBean.getControlsViewBean().getProgressBar().setProgress(100);            interviewControlsStateBean.setOffset(0);            interviewControlsStateBean.setState(InterviewConstants.OVER);            interviewControlsStateBean.getControlsViewBean().getProgressBarStateTv().setText("听语音");            String duration = FileManager.getVideoDuration(mUserAnswerFilePath);            if (("").equals(duration) || duration == null) return;            interviewControlsStateBean.getControlsViewBean().getProgressBarTimeTv().setText(mModel.formatDateTime(Integer.parseInt(duration)));            mActivity.mHoldFragmentControlsMap.put(controlsIdentification, interviewControlsStateBean);        }        changeRecordView(InterviewConstants.SHOW_NOT_SUBMIT_VIEW);    }    /**     * 获取百分比     *     * @param a 分子     * @param b 分母     * @return int     */    private static int getPercent(int a, int b) {        if (a == 0 || b == 0) return 0;        double c = ((double) a / b) * 100;        return (int) c;    }    /*    *   跳转到帮助页面    * */    private void skipToRemarkHelpActivity() {        Intent intent = new Intent(mActivity, InterviewCommentGuideActivity.class);        mActivity.startActivity(intent);    }    /*    *   修改临时录音文件的名称为确认文件名    * */    private void changeFileName() {        if (checkIsRecordFileExist()) {            FileManager.deleteFiles(mUserAnswerFilePath); // 删除掉        }        // 修改名字:将临时文件的名字变成可提交的文件名字        FileManager.renameFile(mTemporaryFilePath, mUserAnswerFilePath);        // 保存缓存文件路径        if (mActivity.mRecordPathMap == null) return;        mActivity.mRecordPathMap.put(String.valueOf(getChildViewPosition()), mUserAnswerFilePath);    }    /*    *   检查录音文件是否已经存在    * */    public boolean checkIsRecordFileExist() {        File recordFile = new File(mUserAnswerFilePath);        String duration = FileManager.getVideoDuration(mUserAnswerFilePath);        return recordFile.exists() && !("").equals(duration) && duration != null && Integer.parseInt(duration) > 0;    }//    private void changeTime() {//        if (mQuestionBean.getUser_audio_duration() >= UPPER_LIMIT_RECORD_TIME) {//            mTimeHadSubmitPlayTv.setText(mModel.formatDateTime(UPPER_LIMIT_RECORD_TIME));//        } else {//            mTimeHadSubmitPlayTv.setText(mModel.formatDateTime(mQuestionBean.getUser_audio_duration() + 1));//        }//    }    private void changeRecordView(int i) {        if (i == InterviewConstants.SHOW_NOT_RECORD_VIEW) {                // 显示未录音时的页面            mRecordingView.setVisibility(View.GONE);            mUnSubmitView.setVisibility(View.GONE);            mHadSubmitView.setVisibility(View.GONE);            mUnRecordView.setVisibility(View.VISIBLE);            mRecordSoundIv.setImageResource(R.drawable.interview_confirm_gray);        } else if (i == InterviewConstants.SHOW_RECORDING_VIEW) {          // 显示正在录音页面            mUnRecordView.setVisibility(View.GONE);            mUnSubmitView.setVisibility(View.GONE);            mHadSubmitView.setVisibility(View.GONE);            mRecordingView.setVisibility(View.VISIBLE);        } else if (i == InterviewConstants.SHOW_NOT_SUBMIT_VIEW) {         // 显示未提交页面            mUnRecordView.setVisibility(View.GONE);            mRecordingView.setVisibility(View.GONE);            mHadSubmitView.setVisibility(View.GONE);            mUnSubmitView.setVisibility(View.VISIBLE);        } else if (i == InterviewConstants.SHOW_HAD_SUBMIT_VIEW) {         // 显示已经提交题页面            mUnRecordView.setVisibility(View.GONE);            mRecordingView.setVisibility(View.GONE);            mUnSubmitView.setVisibility(View.GONE);            mHadSubmitView.setVisibility(View.VISIBLE);            mPurchasedLinkTv.getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG); //下划线            mPurchasedLinkTv.getPaint().setAntiAlias(true);//抗锯齿        }    }    /*    *   修改点评次数    * */    private void changeTeacherRemarkNum() {        ForegroundColorSpan colorSpan = new ForegroundColorSpan(ContextCompat.getColor(mActivity, R.color.opencourse_btn_bg));        //解析        if (mTeacherRemarkRemainderNum == null || mTeacherRemarkRemainderNum.length() <= 0){            mTeacherRemarkRemainderNum = "0";        }        SpannableString analysis = new SpannableString("您有" + String.valueOf(mTeacherRemarkRemainderNum) + "次点评申请");        int length = String.valueOf(mTeacherRemarkRemainderNum).length() + 2;        analysis.setSpan(colorSpan, 2, length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        mRemarkNumberTv.setText(analysis);    }    /**     * 准备录音     */    public void prepareRecord() {        mActivity.mMediaRecorderManager.checkRecordStatus(new MediaRecorderManager.ICheckRecordStatusListener() {            @Override            public void onCheckRecordStatusFinished(boolean enableRecord) {                if (enableRecord) {                    startRecord();         // 开始录音                }            }        });    }    private void setIsCanTouch() {        if (mIsCanTouch) {            mActivity.mViewPager.setScroll(true);    // 让viewPager不拦截        } else {            mActivity.mViewPager.setScroll(false);       // 让viewpager拦截        }    }    /**     * 开始录音:将录音的文件先存入缓存文件中     **/    public void startRecord() {        mActivity.mMediaRecorderManager.setRecordFilePath(mTemporaryFilePath);        if (FileManager.isFile(mTemporaryFilePath)) {            FileManager.deleteFiles(mTemporaryFilePath);        }        mActivity.mMediaRecorderManager.startRecord(new MediaRecorderManager.IRecordDurationCallback() {            @Override            public void onRecordDuration(int duration) {                // 处理录音的时长                showRecordingDuration(duration);            }        });        // 设置屏幕常亮        mActivity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);    }    /*    *   显示正在录音的时长    * */    private void showRecordingDuration(int duration) {        if (duration >= 0 && duration <= InterviewConstants.UPPER_LIMIT_RECORD_TIME) {            if (duration >= InterviewConstants.LOWER_LIMIT_RECORD_TIME) {                mIsCanSubmit = true;                mRecordSoundIv.setImageResource(R.drawable.interview_confrim_blue);                if (duration == InterviewConstants.SHOW_TOAST_RECORD_TIME) {                    showReminderToast();                }            } else {                mRecordSoundIv.setImageResource(R.drawable.interview_confirm_gray);            }            mTimeRecordingTv.setText(mModel.formatDateTime(duration));        } else {            stopRecord();            mTimeRecordingTv.setText(mModel.formatDateTime(InterviewConstants.UPPER_LIMIT_RECORD_TIME));        }    }    /*    *  显示已经录音的时长    * */    private void showRecordedDuration() {        String duration = FileManager.getVideoDuration(mUserAnswerFilePath);        if (("").equals(duration) || duration == null ) return;        if (Integer.parseInt(duration) >= InterviewConstants.UPPER_LIMIT_RECORD_TIME) {            mTimeNotSubmitPlayTv.setText(mModel.formatDateTime(InterviewConstants.UPPER_LIMIT_RECORD_TIME));        } else {            mTimeNotSubmitPlayTv.setText(mModel.formatDateTime(Integer.parseInt(duration)));        }    }    /**     * 停止录音     */    public void stopRecord() {        mActivity.mMediaRecorderManager.stopReocrd();    }    /*    *   停止播放语音    * */    public void stopPlay() {        mActivity.setExitsPlayingMedia(false);        mActivity.mMediaRecorderManager.stopPlay();    }    /*    *   播放语音: 需要四个不同的断点    * */    public void play(String filePath) {        // 检验是否存在其他应用正在播放音乐: 获取音频焦点        getAudioStreamFocus();        if (("").equals(filePath) || filePath == null ) return;        mActivity.mMediaRecorderManager.setPlayFilePath(filePath);        //播放的断点        mActivity.mMediaRecorderManager.startPlay(getOffset(), new MediaRecorderManager.IPlayCompleteCallback() {            @Override            public void onPlayComplete() {                ToastManager.showToast(mActivity, "播放完成");                dealPlayCompletedViewState();                 // 播放完成处理                mActivity.setExitsPlayingMedia(false);      // 可以按返回键            }        }, new MediaRecorderManager.IPlayFileCountdownCallback() {            @Override            public void onPlayCountdown(int unPlayDur) {                // 将数据封装到bean中                dealPlayingViewState(unPlayDur);                // 播放时的处理            }        });        // 设置屏幕常亮        mActivity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);    }    /*   *   获取音频流焦点   * */    private void getAudioStreamFocus() {//        mActivity.startService(new Intent(mActivity, MediaPlayingService.class)); // 开启服务    }    /*    *   获取不同播放状态下的断点值    * */    private int getOffset() {        if (mActivity.mHoldFragmentControlsMap == null || mActivity.mHoldFragmentControlsMap.size() <= 0) return 0;        String controlsIdentification = null;        switch (mStatus) {            case InterviewConstants.SUBMIT:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 0);                break;            case InterviewConstants.HAD_SUBMIT:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 1);                break;            case InterviewConstants.QUESTION_ITEM:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 2);                break;            case InterviewConstants.ANALYSIS_ITEM:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 3);                break;            case InterviewConstants.TEACHER_REMARK:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 4);                break;        }        return mActivity.mHoldFragmentControlsMap.get(controlsIdentification).getOffset();    }    /*    *   播放时状态的处理:    * */    private void dealPlayingViewState(int unPlayDur) {//        Logger.e(" dealPlayingViewState ");        mActivity.setPlayingChildViewId(getChildViewPosition());                // 正在播放的播放器的页面索引        mActivity.setExitsPlayingMedia(true);        if (mActivity.mHoldFragmentControlsMap == null ) return;        Logger.e(" mActivity.mHoldFragmentControlsMap.size() 222 == " + mActivity.mHoldFragmentControlsMap.size());        Iterator<Map.Entry<String, InterviewControlsStateBean>> iterator = mActivity.mHoldFragmentControlsMap.entrySet().iterator();        while (iterator.hasNext()) {            Map.Entry<String, InterviewControlsStateBean> controlsStateBeanEntry = iterator.next();            InterviewControlsStateBean interviewControlsStateBean = controlsStateBeanEntry.getValue();            if (interviewControlsStateBean == null) continue;            Logger.e(" aaa");            InterviewControlsStateBean.ControlsViewBean controlsViewBean = interviewControlsStateBean.getControlsViewBean();        // 为空            if (controlsViewBean == null) continue;                        // 第一页的播放器会在滑动到第三页时销毁            Logger.e(" bbb");            String itemType = interviewControlsStateBean.getItemType();            String state = interviewControlsStateBean.getState();            if (("").equals(itemType) || itemType == null                   || ("").equals(state) || state == null) continue;            if (state.equals(InterviewConstants.PLAY)) {                switch (itemType) {                    case InterviewConstants.SUBMIT:                        String totalDuration = FileManager.getVideoDuration(mUserAnswerFilePath);                        if (("").equals(totalDuration) || totalDuration == null ) continue;                        interviewControlsStateBean.getControlsViewBean().getProgressBar().setProgress(getPercent(unPlayDur,Integer.parseInt(totalDuration)));                        interviewControlsStateBean.getControlsViewBean().getProgressBarStateTv().setText("听语音");                        interviewControlsStateBean.getControlsViewBean().getProgressBarTimeTv().setText(mModel.formatDateTime(unPlayDur));                        break;                    case InterviewConstants.HAD_SUBMIT:                        interviewControlsStateBean.getControlsViewBean().getProgressBar().setProgress(getPercent(unPlayDur, mQuestionBean.getUser_audio_duration()));                        interviewControlsStateBean.getControlsViewBean().getProgressBarStateTv().setText("听语音");                        interviewControlsStateBean.getControlsViewBean().getProgressBarTimeTv().setText(mModel.formatDateTime(unPlayDur));                        break;                    case InterviewConstants.QUESTION_ITEM:                        interviewControlsStateBean.getControlsViewBean().getProgressBar().setProgress(getPercent(unPlayDur, mQuestionBean.getQuestion_audio_duration()));                        interviewControlsStateBean.getControlsViewBean().getProgressBarTimeIv().setImageResource(R.drawable.interview_listen_audio);                        mediaPlayingAnimation(true);                        break;                    case InterviewConstants.ANALYSIS_ITEM:                        interviewControlsStateBean.getControlsViewBean().getProgressBar().setProgress(getPercent(unPlayDur, mQuestionBean.getAnalysis_audio_duration()));                        interviewControlsStateBean.getControlsViewBean().getProgressBarTimeIv().setImageResource(R.drawable.interview_listen_audio);                        mediaPlayingAnimation(true);                        break;                    case InterviewConstants.TEACHER_REMARK:                        interviewControlsStateBean.getControlsViewBean().getProgressBar().setProgress(getPercent(unPlayDur,mQuestionBean.getTeacher_audio_duration()));                        interviewControlsStateBean.getControlsViewBean().getProgressBarStateTv().setText("收听点评");                        interviewControlsStateBean.getControlsViewBean().getProgressBarTimeTv().setText(mModel.formatDateTime(unPlayDur));                        break;                }            }        }    }    /*    *  中间图片的动画:播放,停止    * */    public void mediaPlayingAnimation(boolean isPlaying) {        if (isPlaying) {            if (mStatus.equals(InterviewConstants.QUESTION_ITEM)) {                mQuestionAudioIv.setImageResource(R.drawable.interview_audio_playing_animation);                AnimationDrawable questionAudioIv = (AnimationDrawable) mQuestionAudioIv.getDrawable();                questionAudioIv.start();            } else if (mStatus.equals(InterviewConstants.ANALYSIS_ITEM)) {                mAnalysisAudioIv.setImageResource(R.drawable.interview_audio_playing_animation);                AnimationDrawable analysisAudioIv = (AnimationDrawable) mAnalysisAudioIv.getDrawable();                analysisAudioIv.start();            }        } else {            if (mStatus.equals(InterviewConstants.QUESTION_ITEM)) {                mQuestionAudioIv.setImageResource(R.drawable.interview_audio_playing_animation);                AnimationDrawable questionAudioIv = (AnimationDrawable) mQuestionAudioIv.getDrawable();                questionAudioIv.stop();            } else if (mStatus.equals(InterviewConstants.ANALYSIS_ITEM)) {                mAnalysisAudioIv.setImageResource(R.drawable.interview_audio_playing_animation);                AnimationDrawable analysisAudioIv = (AnimationDrawable) mAnalysisAudioIv.getDrawable();                analysisAudioIv.stop();            }        }    }    /*    *   判断名师点评目录中是否存在文件    * */    private boolean isExistTeacherRemarkAudio(){        String filePath = mTeacherRemarkRecordFolder + "/" + mTeacherRemarkAudioTimeStamp + ".amr";        File file = new File(filePath);        return file.exists();    }    /*   *   弹出引导浮层   * */    private void popupGuideFloating() {        if (mActivity == null) return;        final AlertDialog alertDialog = new AlertDialog.Builder(mActivity, R.style.NoBackGroundDialog).create();        alertDialog.setCanceledOnTouchOutside(true);        alertDialog.show();        Window mWindow = alertDialog.getWindow();        if (mWindow == null) return;        mWindow.setContentView(R.layout.interview_popupwindow_applyfor_remark_guide_floating);        mWindow.setBackgroundDrawableResource(R.color.transparency);   //背景色        mWindow.setGravity(Gravity.END | Gravity.BOTTOM);        WindowManager.LayoutParams lp = mWindow.getAttributes();        DisplayMetrics metrics = new DisplayMetrics();        mActivity.getWindowManager().getDefaultDisplay().getMetrics(metrics);        int width = View.MeasureSpec.makeMeasureSpec(0,                View.MeasureSpec.UNSPECIFIED);        int height = View.MeasureSpec.makeMeasureSpec(0,                View.MeasureSpec.UNSPECIFIED);        mTeacherRemarkProgressBar.measure(width, height);        int teacherRemarkProgressBarHeight = mTeacherRemarkProgressBar.getMeasuredHeight();     // 测量的是它的父控件的大小        lp.x = (int) (metrics.widthPixels * 0.04);        lp.y = teacherRemarkProgressBarHeight + 15;           // y轴偏移量        lp.width = (int) (metrics.widthPixels * 0.6);        lp.height = (int) (metrics.heightPixels * 0.16);        lp.alpha = 0.8f;        mWindow.setAttributes(lp);        ImageView cancel = (ImageView) mWindow.findViewById(R.id.cancel_guide_floating);        LinearLayout lookRemarkLl = (LinearLayout) mWindow.findViewById(R.id.lookover_teacher_remark);        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                alertDialog.dismiss();            }        });        lookRemarkLl.setOnClickListener(new View.OnClickListener() {        // 了解名师点评            @Override            public void onClick(View view) {                alertDialog.dismiss();                skipToRemarkHelpActivity(); // 跳转到帮助页面                //Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Intro");                UmengManager.onEvent(mActivity, "InterviewAnalysis", map);            }        });    }    /*    *    弹出申请名师点评弹窗    * */    private void popupApplyForRemarkAlert() {        if (mActivity == null) return;        final AlertDialog alertDialog = new AlertDialog.Builder(mActivity).create();        alertDialog.setCancelable(false);                         // 背景页面不可点,返回键也不可点击        alertDialog.show();        Window mWindow = alertDialog.getWindow();        if (mWindow == null) return;        mWindow.setContentView(R.layout.interview_popupwindow_applyfor_remark);        mWindow.setBackgroundDrawableResource(R.color.transparency);   //背景色        mWindow.setGravity(Gravity.BOTTOM);                         // 除底部弹出        mWindow.getDecorView().setPadding(0, 0, 0, 0);                 // 消除边距        WindowManager.LayoutParams layoutParams = mWindow.getAttributes();        layoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;        // 背景宽度设置成和屏幕宽度一致        layoutParams.height = WindowManager.LayoutParams.WRAP_CONTENT;        mWindow.setAttributes(layoutParams);        ImageView cancelRemarkIv = (ImageView) mWindow.findViewById(R.id.cancle_applyfor_remark);        TextView confirmRemarkTv = (TextView) mWindow.findViewById(R.id.confirm_applyfor_remark);        TextView applyForRemarkNumbTv = (TextView) mWindow.findViewById(R.id.applyfor_remainder_numb);      // 点评还剩的次数        String numText = mTeacherRemarkRemainderNum + "次";        applyForRemarkNumbTv.setText(numText);        cancelRemarkIv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                alertDialog.dismiss();            }        });        confirmRemarkTv.setOnClickListener(new View.OnClickListener() {     // 确认申请点评的按钮            @Override            public void onClick(View view) {                // 发送请求:请求点评, 需要回调                mModel.mRequest.applyForTeacherRemark(mQuestionBean.getId(), "buy");                alertDialog.dismiss();                //Umeng                HashMap<String, String> map = new HashMap<>();                map.put("Action", "Apply");                UmengManager.onEvent(mActivity, "InterviewAnalysis", map);            }        });    }    /*    *   申请后的提示弹窗    *  */    @Override    public void popupAppliedForRemarkReminderAlert() {        if (mActivity == null) return;        final AlertDialog alertDialog = new AlertDialog.Builder(mActivity).create();        alertDialog.setCancelable(false);                         // 背景页面不可点,返回键也不可点击        alertDialog.show();        Window mWindow = alertDialog.getWindow();        if (mWindow == null) return;        mWindow.setContentView(R.layout.interview_popupwindow_applyfor_remark_reminder);        mWindow.setBackgroundDrawableResource(R.color.transparency);   //背景色        mWindow.setGravity(Gravity.CENTER);        WindowManager.LayoutParams lp = mWindow.getAttributes();        DisplayMetrics metrics = new DisplayMetrics();        mActivity.getWindowManager().getDefaultDisplay().getMetrics(metrics);        lp.width = (int) (metrics.widthPixels * 0.9);        lp.height = (int) (metrics.heightPixels * 0.35);        mWindow.setAttributes(lp);        TextView confirm = (TextView) mWindow.findViewById(R.id.confirm);        TextView firstLineTv = (TextView) mWindow.findViewById(R.id.firstLine_tv);        TextView secondLineTv = (TextView) mWindow.findViewById(R.id.secondLine_tv);        ForegroundColorSpan colorSpan = new ForegroundColorSpan(ContextCompat.getColor(mActivity, R.color.opencourse_grade_num));        SpannableString analysisFirst = new SpannableString("您将在" + "3个" + "工作日内收到名师点评。");        SpannableString analysisSecond = new SpannableString("请在" + "记录-面试-名师点评" + "中查看。");        analysisFirst.setSpan(colorSpan, 3, 5, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        analysisSecond.setSpan(colorSpan, 2, 12, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);        firstLineTv.setText(analysisFirst);        secondLineTv.setText(analysisSecond);        confirm.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                alertDialog.dismiss();            }        });    }    /*    *   提示购买的alert    * */    private void popupReminderPurchasedAlert() {        if (mActivity.isFinishing()) return;        final AlertDialog alertDialog = new AlertDialog.Builder(mActivity).create();        alertDialog.setCancelable(false);                         // 背景页面不可点,返回键也不可点击        alertDialog.show();        Window mWindow = alertDialog.getWindow();        if (mWindow == null) return;        mWindow.setContentView(R.layout.interview_popupwindow_reminder_purchased_remark);        mWindow.setBackgroundDrawableResource(R.color.transparency);   //背景色        mWindow.setGravity(Gravity.CENTER);        WindowManager.LayoutParams lp = mWindow.getAttributes();        DisplayMetrics metrics = new DisplayMetrics();        mActivity.getWindowManager().getDefaultDisplay().getMetrics(metrics);        lp.width = (int) (metrics.widthPixels * 0.8);        lp.height = (int) (metrics.heightPixels * 0.35);        mWindow.setAttributes(lp);        TextView cancel = (TextView) mWindow.findViewById(R.id.purchased_remark_cancel);        TextView confirm = (TextView) mWindow.findViewById(R.id.purchased_remark_confirm);        TextView teacherRemarkRemainderNum = (TextView) mWindow.findViewById(R.id.purchase_teacherRemark_remainder_num);        String textRemainderNum = "您当前共有0次点评申请,请先购买名师点评哦!";        teacherRemarkRemainderNum.setText(textRemainderNum);        confirm.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                alertDialog.dismiss();                // 购买                final Intent intent = new Intent(getActivity(), InterviewCommentProductActivity.class);                startActivityForResult(intent, InterviewConstants.PAY_SUCCESS);            }        });        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                alertDialog.dismiss();            }        });    }    /*    *   广播接收者: 处理电话监听状态    * */    private class PhoneBroadcastReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            // 如果是拨打电话            if (intent.getAction().equals(Intent.ACTION_NEW_OUTGOING_CALL)) {                changeControlsBeanState();                updateControlsView();            } else {                // 如果是来电                TelephonyManager tManager = (TelephonyManager) context                        .getSystemService(Service.TELEPHONY_SERVICE);                switch (tManager.getCallState()) {                    case TelephonyManager.CALL_STATE_RINGING:   // 响铃                        changeControlsBeanState();                        updateControlsView();                        break;                    case TelephonyManager.CALL_STATE_OFFHOOK:   //通话中                        break;                    case TelephonyManager.CALL_STATE_IDLE:      //待机状态                        break;                }            }        }    }    /*    *   获取音频焦点的广播接收者    * */    private class AudioStreamFocusReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            boolean isGetAudioFocus = intent.getExtras().getBoolean("isGetAudioFocus", false); // 是否获取到了焦点            if (!isGetAudioFocus) {                changeControlsBeanState();                updateControlsView();                if (!mIsRecording) return;                checkRecordingState();            }        }    }    public void isDone(){        boolean isDone = mQuestionBean != null && mQuestionBean.getUser_audio() != null                && mQuestionBean.getUser_audio().length() > 0;        mActivity.setIsDone(isDone);    }    /*    *   切换页面时控件的播放保持 & 暂停时控件恢复成默认状态    * */    public void updateFragmentViewState(){        Logger.e(" updateFragmentViewState " + getChildViewPosition());        // 刷新是未提交时的页面        // 将判断时未提交页面的方法根据集合判断        updateUnSubmitView();        if (mActivity.mHoldFragmentControlsMap == null || mActivity.mHoldFragmentControlsMap.size() <= 0) return;         // 集合中没有控件        Iterator<Map.Entry<String, InterviewControlsStateBean>> iterator = mActivity.mHoldFragmentControlsMap.entrySet().iterator();        while (iterator.hasNext()) {            Map.Entry<String, InterviewControlsStateBean> interviewControlsStateBeanEntry = iterator.next();            final InterviewControlsStateBean interviewControlsStateBean = interviewControlsStateBeanEntry.getValue();            if (interviewControlsStateBean == null) continue;                             // 集合中没有此控件            String state = interviewControlsStateBean.getState();            final String itemType = interviewControlsStateBean.getItemType();           // 控件的类型            final String key = interviewControlsStateBeanEntry.getKey();            if (("").equals(state) || state == null                    || ("").equals(itemType) || itemType == null                        || ("").equals(key) || key == null) continue;            // 判断是否是本页面            boolean isSamePager = mModel.isSamePager(getChildViewPosition(), key);            if (isSamePager) {                if (state.equals(InterviewConstants.PLAY)) {        // 控件是播放状态                    mActivity.mMediaRecorderManager.regainPlay(new MediaRecorderManager.IPlayFileCountdownCallback() {                        @Override                        public void onPlayCountdown(int unPlayDur) {                            if (unPlayDur > 0){                                // 新创建内部类: 封装view控件                                InterviewControlsStateBean.ControlsViewBean controlsViewBean = new InterviewControlsStateBean().new ControlsViewBean();                                switch (itemType){                                    // 添加播放时的控件的bean                                    case InterviewConstants.SUBMIT:                                        String duration = FileManager.getVideoDuration(mUserAnswerFilePath);                                        if (("").equals(duration) || duration == null ) return;                                        mUserNotSubmitAudioProgressBar.setProgress(getPercent(unPlayDur, Integer.parseInt(duration)));                                        mTimeNotSubmitPlayTv.setText(mModel.formatDateTime(unPlayDur));                                        mStatus = InterviewConstants.SUBMIT;                                        // 将控件添加到新建的内部bean中                                        addControlsToInnerBean(controlsViewBean, mUserNotSubmitAudioProgressBar, mNotSubmitStateTv, null, mTimeNotSubmitPlayTv);                                        break;                                    case InterviewConstants.HAD_SUBMIT:                                        mUserHadSubmitAudioProgressBar.setProgress(getPercent(unPlayDur, mQuestionBean.getUser_audio_duration()));                                        mTimeHadSubmitPlayTv.setText(mModel.formatDateTime(unPlayDur));                                        mStatus = InterviewConstants.HAD_SUBMIT;                                        addControlsToInnerBean(controlsViewBean, mUserHadSubmitAudioProgressBar, mUserAnswerPlayStateTv, null, mTimeHadSubmitPlayTv);                                        break;                                    case InterviewConstants.QUESTION_ITEM:                                        mQuestionAudioProgressBar.setProgress(getPercent(unPlayDur, mQuestionBean.getQuestion_audio_duration()));   // 题目行的进度条                                        mediaPlayingAnimation(true);                                        mStatus = InterviewConstants.QUESTION_ITEM;                                        addControlsToInnerBean(controlsViewBean, mQuestionAudioProgressBar, mQuestionAudioTv, mQuestionAudioIv, null);                                        break;                                    case InterviewConstants.ANALYSIS_ITEM:                                        mAnalysisAudioProgressBar.setProgress(getPercent( unPlayDur, mQuestionBean.getAnalysis_audio_duration()));                                        mediaPlayingAnimation(true);                                        mStatus = InterviewConstants.ANALYSIS_ITEM;                                        addControlsToInnerBean(controlsViewBean, mAnalysisAudioProgressBar, mAnalysisAudioTv, mAnalysisAudioIv, null);                                        break;                                    case InterviewConstants.TEACHER_REMARK:                                        mTeacherRemarkProgressBar.setProgress(getPercent(unPlayDur, mQuestionBean.getTeacher_audio_duration()));                                        mTeacherRemarkPlayTimeTv.setText(mModel.formatDateTime(unPlayDur));                                        mStatus = InterviewConstants.TEACHER_REMARK;                                        addControlsToInnerBean(controlsViewBean, mTeacherRemarkProgressBar, mTeacherRemarkPlayStateTv, null, mTeacherRemarkPlayTimeTv);                                        break;                                }                                interviewControlsStateBean.setControlsViewBean(controlsViewBean);                            } else {                                interviewControlsStateBean.setState(InterviewConstants.OVER);           // 修改bean                                updateControlsView();                                                    // 刷新view                            }                            mActivity.mHoldFragmentControlsMap.put(key, interviewControlsStateBean);                        }                    });                } else if (state.equals(InterviewConstants.PAUSE) || state.equals(InterviewConstants.OVER)) {       // 第一页的播放器在第三页播放完毕                    setFragmentProgressBarToDefault();                }            }        }    }    /*    *   将控件添加到内部bean中    * */    private void addControlsToInnerBean(InterviewControlsStateBean.ControlsViewBean controlsViewBean,RoundProgressBarWidthNumber progressBar                                            ,TextView progressBarStateTv, ImageView progressBarIv, TextView progressBarTimeTv ) {        controlsViewBean.setProgressBar(progressBar);        controlsViewBean.setProgressBarStateTv(progressBarStateTv);        controlsViewBean.setProgressBarTimeIv(progressBarIv);        controlsViewBean.setProgressBarTimeTv(progressBarTimeTv);    }    private void setFragmentProgressBarToDefault(){        // 未付费和已付费页面不同        if (mAnalysisAudioProgressBar != null )            mAnalysisAudioProgressBar.setProgress(100);        if (mQuestionAudioProgressBar != null )            mQuestionAudioProgressBar.setProgress(100);        if (mUserNotSubmitAudioProgressBar != null )            mUserNotSubmitAudioProgressBar.setProgress(100);        if (mUserHadSubmitAudioProgressBar != null )            mUserHadSubmitAudioProgressBar.setProgress(100);        if (mTeacherRemarkProgressBar != null )            mTeacherRemarkProgressBar.setProgress(100);    }    /*    *   刷新未提交页面    * */    public void updateUnSubmitView(){        // 判断activity中集合是否为空        if (mActivity.mRecordPathMap == null || mActivity.mRecordPathMap.size() <= 0                || getChildViewPosition() >= mActivity.mRecordPathMap.size()) return;        String recordPath = mActivity.mRecordPathMap.get(String.valueOf(getChildViewPosition()));        if (recordPath == null || recordPath.length() <= 0) return;        if (checkIsRecordFileExist() ) {     // 录音文件存在,进入可提交页面            changeToUnSubmitViewState();            mIsHadValidRecordFile = true;        }    }    @Override    public void onDestroyView() {        super.onDestroyView();        mActivity.unregisterReceiver(mPhoneBroadcastReceiver);  // 取消注册广播        mActivity.unregisterReceiver(mAudioStreamFocusReceiver);  // 取消注册广播        mActivity.stopService(new Intent(mActivity, MediaPlayingService.class));          // 取消注册服务//        mAnalysisAudioProgressBar.setProgress(50);        // 销毁的时候需要销毁,集合中存储的控件        if (mActivity.mHoldFragmentControlsMap == null || mActivity.mHoldFragmentControlsMap.size() <= 0) return;        Iterator<Map.Entry<String, InterviewControlsStateBean>> iterator = mActivity.mHoldFragmentControlsMap.entrySet().iterator();        while (iterator.hasNext()) {            Map.Entry<String, InterviewControlsStateBean> interviewControlsStateBeanEntry = iterator.next();            InterviewControlsStateBean interviewControlsStateBean = interviewControlsStateBeanEntry.getValue();            if (interviewControlsStateBean == null) continue;            String key = interviewControlsStateBeanEntry.getKey();            String state = interviewControlsStateBean.getState();            if (("").equals(key) || key == null                    || ("").equals(state) || state == null) continue;            boolean isSamePager = mModel.isSamePager(getChildViewPosition(), key);            if (isSamePager) {                if (state.equals(InterviewConstants.PAUSE) || state.equals(InterviewConstants.OVER)){                    iterator.remove();                } else if (state.equals(InterviewConstants.PLAY)) {                    InterviewControlsStateBean.ControlsViewBean controlsViewBean = interviewControlsStateBean.getControlsViewBean();                    if (controlsViewBean == null ) continue;                    interviewControlsStateBean.setControlsViewBean(null);                    mActivity.mHoldFragmentControlsMap.put(key, interviewControlsStateBean);                }            }        }    }    /*   *   播放 or 暂停语音   * */    public void setControlsToPlayOrPause(String controlsIdentification) {        if (("").equals(controlsIdentification) || controlsIdentification == null) return;        Logger.e(" setControlsToPlayOrPause controlsIdentification == " + controlsIdentification);        if (mActivity.mHoldFragmentControlsMap == null                || mActivity.mHoldFragmentControlsMap.size() <= 0                ||  mActivity.mHoldFragmentControlsMap.get(controlsIdentification) == null ){         // 存储控件的集合为空or控件不存在            Logger.e(" 控件不存在 ");            playAudio();        // 播放语音            return;        }        String state = mActivity.mHoldFragmentControlsMap.get(controlsIdentification).getState();       // 获取控件的状态        if (("").equals(state) || state == null) return;        if (state.equals(InterviewConstants.PLAY)) {            // 暂停语音            pauseAudio(mActivity.mHoldFragmentControlsMap.get(controlsIdentification), controlsIdentification);        } else {            // 播放语音            playAudio();        }    }    /*    *   播放    * */    public void playAudio(){//        Logger.e(" playAudio ");        // 先修改map中的状态:同一个页面设置为暂停,不同的页面设置为默认状态        changeControlsBeanState();        // 刷新控件的view        updateControlsView();        // 添加播放时的控件的bean        addControlsBeanToMap();        // 下载播放 & 控件的播放效果        downLoadAndPlayAudio();    }    /*    *   修改控件bean的属性    * */    private void changeControlsBeanState() {        if (mActivity.mHoldFragmentControlsMap == null || mActivity.mHoldFragmentControlsMap.size() <= 0) return;        Iterator<Map.Entry<String, InterviewControlsStateBean>> iterator = mActivity.mHoldFragmentControlsMap.entrySet().iterator();        while (iterator.hasNext()) {            Map.Entry<String, InterviewControlsStateBean> controlsStateBeanEntry = iterator.next();            final InterviewControlsStateBean interviewControlsStateBean = controlsStateBeanEntry.getValue();            if (interviewControlsStateBean == null) continue;            String itemType = interviewControlsStateBean.getItemType();            String state = interviewControlsStateBean.getState();            String key = controlsStateBeanEntry.getKey();            if (("").equals(itemType)                    || itemType == null || ("").equals(state)                        || state == null || ("").equals(key) || key == null) continue;            boolean isSamePager = mModel.isSamePager(getChildViewPosition(), key);      // 判断遍历的集合中控件是否为本页面中控件            if (state.equals(InterviewConstants.PLAY)) {                if (isSamePager) {              // 是同一页面                    // 将播放状态的控件bean设置为暂停                    interviewControlsStateBean.setState(InterviewConstants.PAUSE);                    mActivity.mMediaRecorderManager.playOnPause(new MediaRecorderManager.IPlayFileOffsetCallback() {                        @Override                        public void onPlayOffset(int offset) {                            interviewControlsStateBean.setOffset(offset);           // 记录断点值                        }                    });                } else {                        // 不是同一个页面                    // 将播放控件的bean设置为默认                    interviewControlsStateBean.setState(InterviewConstants.OVER);                }                mActivity.mHoldFragmentControlsMap.put(key, interviewControlsStateBean);            }        }    }    /*    *   修改控件的view: 暂停或默认    * */    private void updateControlsView() {        Logger.e(" updateControlsView 刷新view");        // 遍历map,修改控件的view        if (mActivity.mHoldFragmentControlsMap == null || mActivity.mHoldFragmentControlsMap.size() <= 0) return;        Iterator<Map.Entry<String, InterviewControlsStateBean>> iterator = mActivity.mHoldFragmentControlsMap.entrySet().iterator();        while (iterator.hasNext()) {            Map.Entry<String, InterviewControlsStateBean> controlsStateBeanEntry = iterator.next();            InterviewControlsStateBean interviewControlsStateBean = controlsStateBeanEntry.getValue();            if (interviewControlsStateBean == null) continue;            InterviewControlsStateBean.ControlsViewBean controlsViewBean = interviewControlsStateBean.getControlsViewBean();            if (controlsViewBean == null) continue;                       // 控件销毁时,播放依然存在时,刷新view的判断条件            String itemType = interviewControlsStateBean.getItemType();            String state = interviewControlsStateBean.getState();            String key = controlsStateBeanEntry.getKey();            if (("").equals(itemType)                    || itemType == null || ("").equals(state)                    || state == null || ("").equals(key) || key == null) continue;            if (state.equals(InterviewConstants.PAUSE)) {                interviewControlsStateBean.getControlsViewBean().getProgressBarStateTv().setText("继续听");                if (itemType.equals(InterviewConstants.QUESTION_ITEM) || itemType.equals(InterviewConstants.ANALYSIS_ITEM)) {                    interviewControlsStateBean.getControlsViewBean().getProgressBarTimeIv().setImageResource(R.drawable.interview_listen_pause);                }            } else if (state.equals(InterviewConstants.OVER)) {                interviewControlsStateBean.setOffset(0);                interviewControlsStateBean.getControlsViewBean().getProgressBar().setProgress(100);                if (itemType.equals(InterviewConstants.QUESTION_ITEM) || itemType.equals(InterviewConstants.ANALYSIS_ITEM)) {                    interviewControlsStateBean.getControlsViewBean().getProgressBarTimeIv().setImageResource(R.drawable.interview_listen_audio);                    interviewControlsStateBean.getControlsViewBean().getProgressBarStateTv().setText("听语音");                } else if (itemType.equals(InterviewConstants.SUBMIT)) {                    String totalDuration = FileManager.getVideoDuration(mUserAnswerFilePath);                    if (("").equals(totalDuration) || totalDuration == null) return;                    interviewControlsStateBean.getControlsViewBean().getProgressBarTimeTv().setText(mModel.formatDateTime(Integer.parseInt(totalDuration)));                    interviewControlsStateBean.getControlsViewBean().getProgressBarStateTv().setText("听语音");                } else if (itemType.equals(InterviewConstants.HAD_SUBMIT)) {                    interviewControlsStateBean.getControlsViewBean().getProgressBarTimeTv().setText(mModel.formatDateTime(mQuestionBean.getUser_audio_duration()));                    interviewControlsStateBean.getControlsViewBean().getProgressBarStateTv().setText("听语音");                } else if (itemType.equals(InterviewConstants.TEACHER_REMARK)) {                    interviewControlsStateBean.getControlsViewBean().getProgressBarTimeTv().setText(mModel.formatDateTime(mQuestionBean.getTeacher_audio_duration()));                    interviewControlsStateBean.getControlsViewBean().getProgressBarStateTv().setText("收听点评");                }            }            mActivity.mHoldFragmentControlsMap.put(key, interviewControlsStateBean);        }    }    /*    *   动态的将播放状态的bean添加到map集合中:    * */    private void addControlsBeanToMap() {        Logger.e(" addControlsBeanToMap ");        // 获取上一次记录的offset的值        int controlsOffset = getControlsOffset();        InterviewControlsStateBean interviewControlsStateBean = null;        String controlsIdentification = null;        switch (mStatus) {            case InterviewConstants.SUBMIT:                     // 未提交时                String totalDuration = FileManager.getVideoDuration(mUserAnswerFilePath);                if (("").equals(totalDuration) || totalDuration == null ) return;                interviewControlsStateBean = addControlsToBean(mUserNotSubmitAudioProgressBar, mNotSubmitStateTv, null,                        Integer.parseInt(totalDuration), mTimeNotSubmitPlayTv);                // 控件的标识                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 0);                break;            case InterviewConstants.HAD_SUBMIT:                 // 已提交时: 存在时差,文字快于进度条                interviewControlsStateBean = addControlsToBean(mUserHadSubmitAudioProgressBar, mUserAnswerPlayStateTv, null,                        mQuestionBean.getUser_audio_duration(), mTimeHadSubmitPlayTv);                // 控件的标识                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 1);                break;            case InterviewConstants.QUESTION_ITEM:              // 题目行语音                Logger.e(" addControlsBeanToMap QUESTION_ITEM ");                interviewControlsStateBean = addControlsToBean(mQuestionAudioProgressBar, mQuestionAudioTv, mQuestionAudioIv,                        0, null);                // 控件的标识                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 2);                break;            case InterviewConstants.ANALYSIS_ITEM:              // 解析行语音                interviewControlsStateBean = addControlsToBean(mAnalysisAudioProgressBar, mAnalysisAudioTv, mAnalysisAudioIv,                        0, null);                // 控件的标识                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 3);                break;            case InterviewConstants.TEACHER_REMARK:             // 名师点评                interviewControlsStateBean = addControlsToBean(mTeacherRemarkProgressBar, mTeacherRemarkPlayStateTv, null,                        mQuestionBean.getTeacher_audio_duration(), mTeacherRemarkPlayTimeTv);                // 控件的标识                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 4);                break;        }        Logger.e("controlsIdentification == " + controlsIdentification);        interviewControlsStateBean.setOffset(controlsOffset);        interviewControlsStateBean.setItemType(mStatus);            // 设置具体的item类型        mActivity.mHoldFragmentControlsMap.put(controlsIdentification, interviewControlsStateBean);      // 将控件存入集合中        Logger.e(" mActivity.mHoldFragmentControlsMap.size() 111 == " + mActivity.mHoldFragmentControlsMap.size());    }    /*    *  获取已经存在的控件的断点值    * */    private int getControlsOffset() {        if (mActivity.mHoldFragmentControlsMap == null || mActivity.mHoldFragmentControlsMap.size() <= 0) return 0;        String controlsIdentification = null;        switch (mStatus) {            case InterviewConstants.SUBMIT:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 0);                break;            case InterviewConstants.HAD_SUBMIT:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 1);                break;            case InterviewConstants.QUESTION_ITEM:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 2);                break;            case InterviewConstants.ANALYSIS_ITEM:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 3);                break;            case InterviewConstants.TEACHER_REMARK:                controlsIdentification = mModel.getControlsIdentification(getChildViewPosition(), 4);                break;        }        InterviewControlsStateBean interviewControlsStateBean = mActivity.mHoldFragmentControlsMap.get(controlsIdentification);        if (interviewControlsStateBean == null) return 0;        return interviewControlsStateBean.getOffset();    }    /*    *   将控件添加到bean中    * */    private InterviewControlsStateBean addControlsToBean( RoundProgressBarWidthNumber progressBar,                      TextView progressStateTv, ImageView progressBarImageView, int totalDuration, TextView progressBarTimeTv  ){        InterviewControlsStateBean interviewControlsStateBean = new InterviewControlsStateBean();        interviewControlsStateBean.setState(InterviewConstants.PLAY);        interviewControlsStateBean.setItemType(mStatus);        interviewControlsStateBean.setTotalDuration(totalDuration);        interviewControlsStateBean.getControlsViewBean().setProgressBar(progressBar);        interviewControlsStateBean.getControlsViewBean().setProgressBarStateTv(progressStateTv);        interviewControlsStateBean.getControlsViewBean().setProgressBarTimeIv(progressBarImageView);        interviewControlsStateBean.getControlsViewBean().setProgressBarTimeTv(progressBarTimeTv);        return interviewControlsStateBean;    }    /*    *   下载播放语音 :显示控件的状态    * */    private void downLoadAndPlayAudio() {        mActivity.setPlayingChildViewId(getChildViewPosition());        // 通知具体的哪一个页面存在播放状态的播放器        // 下载语音 & 播放        switch (mStatus){            case InterviewConstants.SUBMIT:                play(mUserAnswerFilePath);                break;            case InterviewConstants.HAD_SUBMIT:                dealDownLoadAudio(mRecordFolder, mQuestionBean.getUser_audio());                break;            case InterviewConstants.QUESTION_ITEM:                dealDownLoadAudio(mQuestionFileFolder, mQuestionBean.getQuestion_audio());                break;            case InterviewConstants.ANALYSIS_ITEM:                dealDownLoadAudio(mAnalysisFileFolder, mQuestionBean.getAnalysis_audio());                break;            case InterviewConstants.TEACHER_REMARK:                // 判断名师点评目录中是否存在文件                if ( !isExistTeacherRemarkAudio()){       // 如果不存在去下载语音                    File file = new File(mTeacherRemarkRecordFolder);                    if (file.exists() && file.isDirectory())  FileManager.deleteFiles(mTeacherRemarkRecordFolder);                    FileManager.mkDir(mTeacherRemarkRecordFolder);                    mModel.setTimeStamp(mTeacherRemarkAudioTimeStamp);                    dealDownLoadAudio(mTeacherRemarkRecordFolder, mQuestionBean.getTeacher_audio());                } else {                    // 直接播放                    String filePath = mTeacherRemarkRecordFolder + "/" + mTeacherRemarkAudioTimeStamp + ".amr";                    play(filePath);                }//                dealDownLoadAudio(mTeacherRemarkRecordFolder, mQuestionBean.getTeacher_audio());                break;        }    }    /*    *  下载语音    * */    public void dealDownLoadAudio(String fileFolder, String audioUrl) {   //点击事件中传递参数        String filePath;        String zipFilePath;        if (mStatus.equals(InterviewConstants.TEACHER_REMARK)){            filePath = fileFolder + "/" + mTeacherRemarkAudioTimeStamp + ".amr";            zipFilePath = fileFolder + "/" + mTeacherRemarkAudioTimeStamp + ".zip";        } else {            filePath = fileFolder + mQuestionBean.getId() + ".amr";            zipFilePath = fileFolder + mQuestionBean.getId() + ".zip";        }        File file = new File(filePath);        File zipFile = new File(zipFilePath);        if (file.exists()) {                                   // 如果文件存在直接播放            play(filePath);        } else if (zipFile.exists()) {            FileManager.unzipFiles(fileFolder, zipFilePath); // 将参数二所对应的文件解压到参数一对应的文件中            FileManager.deleteFiles(zipFilePath);            play(filePath);        } else {                               // 文件不存在进行下载            if (("").equals(audioUrl) || audioUrl == null) return;            downLoadAudio(audioUrl, fileFolder, filePath, zipFilePath);        }        // 设置屏幕常亮        mActivity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);    }    /*    *  处理下载的语音:解压 : 传进来id    * */    private void downLoadAudio(String audioUrl, final String fileFolder, final String filePath, String zipFilePath) {        String localFilePath = null;        if (audioUrl.contains(".amr")) {            localFilePath = filePath;        } else if (audioUrl.contains(".zip")) {            localFilePath = zipFilePath;        }        mModel.downloadAudio(mActivity, audioUrl, fileFolder, localFilePath, new ICommonCallback() {        // mFileFolder时解压后存文件的目录            @Override            public void callback(boolean success) {                if (success) {                    // 播放                    play(filePath);                }            }        });    }    /*    *  暂停语音    * */    public void pauseAudio(final InterviewControlsStateBean interviewControlsStateBean, String controlsIdentification) {        // 记录断点并修改bean        if (interviewControlsStateBean == null || ("").equals(controlsIdentification)                || controlsIdentification == null) return;        mActivity.mMediaRecorderManager.playOnPause(new MediaRecorderManager.IPlayFileOffsetCallback() {            @Override            public void onPlayOffset(int offset) {                interviewControlsStateBean.setOffset(offset);           // 记录断点值            }        });        interviewControlsStateBean.setState(InterviewConstants.PAUSE);        mActivity.mHoldFragmentControlsMap.put(controlsIdentification, interviewControlsStateBean);        // 刷新view        updateControlsView();        // 停止播放        stopPlay();    }    /*   *   播放完成时的状态   * */    private void dealPlayCompletedViewState() {        // 修改bean,正在播放的        changePlayingBeanToDefault();        // 刷新view        updateControlsView();    }    /*    *   将播放的控件的bean设置为默认值    * */    private void changePlayingBeanToDefault(){        if (mActivity.mHoldFragmentControlsMap == null || mActivity.mHoldFragmentControlsMap.size() <= 0) return;        Iterator<Map.Entry<String, InterviewControlsStateBean>> iterator = mActivity.mHoldFragmentControlsMap.entrySet().iterator();        while (iterator.hasNext()) {            Map.Entry<String, InterviewControlsStateBean> controlsStateBeanEntry = iterator.next();            InterviewControlsStateBean interviewControlsStateBean = controlsStateBeanEntry.getValue();            if (interviewControlsStateBean == null) continue;            String itemType = interviewControlsStateBean.getItemType();            String state = interviewControlsStateBean.getState();            String key = controlsStateBeanEntry.getKey();            if (("").equals(itemType)                    || itemType == null || ("").equals(state)                    || state == null || ("").equals(key) || key == null) continue;            if (state.equals(InterviewConstants.PLAY)) {                // 遍历集合将播放控件的bean设置为默认                interviewControlsStateBean.setOffset(0);                interviewControlsStateBean.setState(InterviewConstants.OVER);                mActivity.mHoldFragmentControlsMap.put(key, interviewControlsStateBean);            }        }    }}