// Top-level build file where you can add configuration options common to all sub-projects/modules.
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.operation.ResetOp

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'org.ajoberstar:gradle-git:1.4.1'
        // 听云
        classpath 'com.networkbench.newlens.agent.android:agent-gradle-plugin:2.4.1.1'
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://raw.githubusercontent.com/umeng/mvn-repo-umeng/master/repository" }
        // ActiveAndroid
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    TD_APP_ID = '81FEB0A34608D63C43DED2D2C79412C4'
    UMENG_APPKEY = '551bd7ddfd98c50c5500044f'
    GT_APPID = 'ochSakabi27Qk0igiEO7m5'
    GT_APPKEY = 'BuLLg37oQM7KVj9O0dFEJ8'
    GT_APPSECRET = 'tmhnUpHbgm9E0C3XEgbs45'
    GT_ACTION_APPID = 'com.igexin.sdk.action.ochSakabi27Qk0igiEO7m5'
    GT_AUTHORITIES = 'downloads.com.appublisher.quizbank'
    QQ_SCHEME = 'tencent1104655578'
    GD_KEY = 'b2a10842076b75ad042ce68dbe3a397b'
}

task pullLibBasic {
    doLast {
        //noinspection GroovyAssignabilityCheck
        def path = projectDir.getParentFile().getAbsolutePath() + '/YaoguoLibs/lib_basic'
        def libFile = file(path)
        def branch = 'release_1.2.0'

        if (libFile.exists()) {
            //noinspection GroovyAssignabilityCheck
            def grgit = Grgit.open(
                    dir: file(path),
                    creds: new org.ajoberstar.grgit.Credentials(
                            BITBUCKET_USERNAME, BITBUCKET_PASSWORD))
            grgit.checkout(branch: branch)
            grgit.reset(mode: ResetOp.Mode.HARD)
            grgit.pull()
        } else {
            //noinspection GroovyAssignabilityCheck
            Grgit.clone(
                    dir: file(path),
                    uri: 'https://bitbucket.org/appublisher/android_lib_basic.git',
                    refToCheckout: branch,
                    credentials: new org.ajoberstar.grgit.Credentials(
                            BITBUCKET_USERNAME, BITBUCKET_PASSWORD))
        }
    }
}

task pullLibLogin {
    doLast {
        //noinspection GroovyAssignabilityCheck
        def path = projectDir.getParentFile().getAbsolutePath() + '/YaoguoLibs/lib_login'
        def libFile = file(path)
        def branch = 'release_1.2.0'

        if (libFile.exists()) {
            //noinspection GroovyAssignabilityCheck
            def grgit = Grgit.open(
                    dir: file(path),
                    creds: new org.ajoberstar.grgit.Credentials(
                            BITBUCKET_USERNAME, BITBUCKET_PASSWORD))
            grgit.checkout(branch: branch)
            grgit.reset(mode: ResetOp.Mode.HARD)
            grgit.pull()
        } else {
            //noinspection GroovyAssignabilityCheck
            Grgit.clone(
                    dir: file(path),
                    uri: 'https://bitbucket.org/appublisher/android_lib_login.git',
                    refToCheckout: branch,
                    credentials: new org.ajoberstar.grgit.Credentials(
                            BITBUCKET_USERNAME, BITBUCKET_PASSWORD))
        }
    }
}

task pullLibCourse {
    doLast {
        //noinspection GroovyAssignabilityCheck
        def path = projectDir.getParentFile().getAbsolutePath() + '/YaoguoLibs/lib_course'
        def libFile = file(path)
        def branch = 'release_1.2.0'

        if (libFile.exists()) {
            //noinspection GroovyAssignabilityCheck
            def grgit = Grgit.open(
                    dir: file(path),
                    creds: new org.ajoberstar.grgit.Credentials(
                            BITBUCKET_USERNAME, BITBUCKET_PASSWORD))
            grgit.checkout(branch: branch)
            grgit.reset(mode: ResetOp.Mode.HARD)
            grgit.pull()
        } else {
            //noinspection GroovyAssignabilityCheck
            Grgit.clone(
                    dir: file(path),
                    uri: 'https://bitbucket.org/appublisher/android_lib_course.git',
                    refToCheckout: branch,
                    credentials: new org.ajoberstar.grgit.Credentials(
                            BITBUCKET_USERNAME, BITBUCKET_PASSWORD))
        }
    }
}

task pullLibPay {
    doLast {
        //noinspection GroovyAssignabilityCheck
        def path = projectDir.getParentFile().getAbsolutePath() + '/YaoguoLibs/lib_pay'
        def libFile = file(path)
        def branch = 'release_1.2.0'

        if (libFile.exists()) {
            //noinspection GroovyAssignabilityCheck
            def grgit = Grgit.open(
                    dir: file(path),
                    creds: new org.ajoberstar.grgit.Credentials(
                            BITBUCKET_USERNAME, BITBUCKET_PASSWORD))
            grgit.checkout(branch: branch)
            grgit.reset(mode: ResetOp.Mode.HARD)
            grgit.pull()
        } else {
            //noinspection GroovyAssignabilityCheck
            Grgit.clone(
                    dir: file(path),
                    uri: 'https://bitbucket.org/appublisher/android_lib_pay.git',
                    refToCheckout: branch,
                    credentials: new org.ajoberstar.grgit.Credentials(
                            BITBUCKET_USERNAME, BITBUCKET_PASSWORD))
        }
    }
}

task pullLibs(dependsOn: [pullLibBasic, pullLibLogin, pullLibPay, pullLibCourse])